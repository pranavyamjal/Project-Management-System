import ApiError from "../utils/ApiError.js";
import asyncHandler from "../utils/asyncHandler.js"
import Project from "../models/project.model.js";
import User from "../models/user.model.js";
import ApiResponse from "../utils/ApiResponse.js";


const createProject = asyncHandler(async (req, res) => {

    const {name, description} = req.body

    const project = await Project.create({
        name,
        description
    })  

    if(!project){
        throw new ApiError(400, "Project not created")
    }

    return res
    .status(200)
    .json(
        new ApiResponse(200, project, "Project created successfully")
    )

})

const getAllProjects = asyncHandler(async (req, res) => {

    const projects = await Project.findAll()

    if(!projects){
        throw new ApiError(400, "Projects not found")
    }

    return res
    .status(200)
    .json(
        new ApiResponse(200, projects, "Projects fetched successfully")
    )

})

const getProjectById = asyncHandler(async (req, res) => {

    const project = await Project.findByPk(req.params.id)

    if(!project){
        throw new ApiError(400, "Project not found")
    }

    return res
    .status(200)
    .json(
        new ApiResponse(200, project, "Project fetched successfully")
    )

})

const updateProject = asyncHandler(async (req, res) => {

    const {name, description} = req.body

    const project = await Project.findByPk(req.params.id);

    if(!project){
        throw new ApiError(400, "Project not found")
    }

    if(!name || !description){
        throw new ApiError(400, "Missing required fields")
    }



    const Udatedproject =  project.name = name || project.name; // Only update if a value is provided
    project.description = description || project.description; // Only update if a value is provided

    await project.save();

    if(!Udatedproject){
        throw new ApiError(400, "Project not found")
    }

    if(Udatedproject.name === name && Udatedproject.description === description){
        throw new ApiError(400, "Project not updated")
    }

    return res
    .status(200)
    .json(
        new ApiResponse(200, Udatedproject, "Project updated successfully")
    )

})

const deleteProject = asyncHandler(async (req, res) => {

    await Project.findByPk(req.params.id).then((project) => {
        project.destroy()
    })

    return res
    .status(200)
    .json(
        new ApiResponse(200, null, "Project deleted successfully")
    )

})

const assignUserToProject = asyncHandler(async (req, res) => {

    const {userId, projectId} = req.body
    
    const user = await User.findByPk(userId);
    const project = await Project.findByPk(projectId);

    if(!user || !project){
        throw new ApiError(400, "User or project not found")
    }

    // Assign the project to user using Sequelize through UserProjects table (`addProject` method (generated by `belongsToMany`))
    
    const assignProject = await user.addProject(project);

    if(!assignProject){
        throw new ApiError(400, "User not assigned to project")
    }


    
    return res
    .status(200)
    .json(
        new ApiResponse(200, assignProject, "User assigned to project successfully")
    )

})

const removeUserFromProject = asyncHandler(async (req, res) => {

    const {userId, projectId} = req.body
    
    if(!userId || !projectId){
        throw new ApiError(400, "User or project ID is required")
    }

    const user = await User.findByPk(userId);
    const project = await Project.findByPk(projectId);

    if(!user || !project){
        throw new ApiError(400, "User or project not found")
    }

    // Remove the project from user using Sequelize through UserProjects table (`removeProject` method (generated by `belongsToMany`))
    
    const removeProject = await user.removeProject(project);

    if(!removeProject){
        throw new ApiError(400, "User not removed from project")
    }

    return res
    .status(200)
    .json(
        new ApiResponse(200, removeProject, "User removed from project successfully")
    )

})

const getProjectAssignedToUser = asyncHandler(async (req, res) => {

    const {userId} = req.body
    
    if(!userId){
        throw new ApiError(400, "User ID is required")
    }

    const projects = await User.findByPk(userId).then((user) => {
        return user.getProjects();
    })

    if(!projects){
        throw new ApiError(400, "Projects not found")
    }

    
    return res
    .status(200)
    .json(
        new ApiResponse(200, projects, "Projects fetched successfully")
    )

})



export {createProject,
        getAllProjects,
        getProjectById,
        updateProject,
        deleteProject,
        assignUserToProject,
        removeUserFromProject,
        getProjectAssignedToUser

}